// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCollection.Core.Context;

namespace MovieCollection.Core.Migrations
{
    [DbContext(typeof(MovieCollectionContext))]
    [Migration("20200907014005_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa04567c-552f-44a4-a335-aacce689f21c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAECrE5NOp5nDc3kYd5M+lz02CXZ5CReTikJPORCAGtRxEmc7MNpu8XCE6AE/IlxbS0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d86c8c49-abde-4815-a256-5340c6efbe1d",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "905ac45d-386e-4986-b74f-f39644cffae7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOSP5tEbUIhIatbyvv7+nIa7HuyoEGvoYcwWEpYx19krTn98HxoTLl9zzKxj6IbGVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abd6583c-77b8-4016-9982-e7f64c27ec93",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MovieCollection.Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Deleted = false,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 2L,
                            Deleted = false,
                            Name = "США"
                        },
                        new
                        {
                            Id = 3L,
                            Deleted = false,
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 4L,
                            Deleted = false,
                            Name = "Испания"
                        },
                        new
                        {
                            Id = 5L,
                            Deleted = false,
                            Name = "Германия"
                        },
                        new
                        {
                            Id = 6L,
                            Deleted = false,
                            Name = "Франция"
                        });
                });

            modelBuilder.Entity("MovieCollection.Core.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProducerRefId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("YearOfIssue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProducerRefId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Джанго освобожденный",
                            PosterFileName = "85157a5959894d3092f8a1cfb30cfcb5.png",
                            ProducerRefId = 1L,
                            YearOfIssue = 2012
                        },
                        new
                        {
                            Id = 2L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Криминальное чтиво",
                            PosterFileName = "315d7e86ce92407886629fcec8e18fab.jpg",
                            ProducerRefId = 1L,
                            YearOfIssue = 1994
                        },
                        new
                        {
                            Id = 3L,
                            Author = "user2",
                            Deleted = false,
                            Description = "",
                            Name = "Бесславные ублюдки",
                            PosterFileName = "acdd66d16b944e25bfdd33249790ed2d.jpg",
                            ProducerRefId = 1L,
                            YearOfIssue = 2009
                        },
                        new
                        {
                            Id = 4L,
                            Author = "user2",
                            Deleted = false,
                            Description = "",
                            Name = "Побег из шоушенка",
                            PosterFileName = "ed952073c9f24e49a80f6cceb3cc9ba.jpg",
                            ProducerRefId = 3L,
                            YearOfIssue = 1994
                        },
                        new
                        {
                            Id = 5L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Спасти рядового Райана",
                            PosterFileName = "fc7c8ae1d2c942d79958882086735ccd.png",
                            ProducerRefId = 2L,
                            YearOfIssue = 1998
                        },
                        new
                        {
                            Id = 6L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Инопланетянин",
                            PosterFileName = "b119a9c2ead8460f958106540b1fecbe.jpg",
                            ProducerRefId = 2L,
                            YearOfIssue = 1982
                        },
                        new
                        {
                            Id = 7L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Пандорум",
                            PosterFileName = "ffcd5ad118c74dafaac7b137607147d5.jpg",
                            ProducerRefId = 4L,
                            YearOfIssue = 2009
                        },
                        new
                        {
                            Id = 8L,
                            Author = "user2",
                            Deleted = false,
                            Description = "",
                            Name = "Терминатор",
                            PosterFileName = "9fadd792f1e94344a9138edf058ce9ab.jpg",
                            ProducerRefId = 5L,
                            YearOfIssue = 1984
                        },
                        new
                        {
                            Id = 9L,
                            Author = "user2",
                            Deleted = false,
                            Description = "",
                            Name = "Чужие",
                            PosterFileName = "274b54c8be6c42b5a39afad70b43b6c1.jpg",
                            ProducerRefId = 5L,
                            YearOfIssue = 1986
                        },
                        new
                        {
                            Id = 10L,
                            Author = "user1",
                            Deleted = false,
                            Description = "",
                            Name = "Терминатор 2: Судный день",
                            PosterFileName = "1a3a4c6c458c43a1bdf42da31932e789.jpg",
                            ProducerRefId = 5L,
                            YearOfIssue = 1991
                        });
                });

            modelBuilder.Entity("MovieCollection.Core.Entities.Producer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryRefId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryRefId");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryRefId = 2L,
                            DateOfBirth = new DateTime(1963, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            FirstName = "Квентино",
                            LastName = "Тарантино"
                        },
                        new
                        {
                            Id = 2L,
                            CountryRefId = 2L,
                            DateOfBirth = new DateTime(1946, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            FirstName = "Стивен",
                            LastName = "Спилберг"
                        },
                        new
                        {
                            Id = 3L,
                            CountryRefId = 6L,
                            DateOfBirth = new DateTime(1959, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            FirstName = "Фрэнк",
                            LastName = "Дарабонт"
                        },
                        new
                        {
                            Id = 4L,
                            CountryRefId = 6L,
                            DateOfBirth = new DateTime(1974, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            FirstName = "Кристиан",
                            LastName = "Альварт"
                        },
                        new
                        {
                            Id = 5L,
                            CountryRefId = 6L,
                            DateOfBirth = new DateTime(1954, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            FirstName = "Джеймс",
                            LastName = "Кэмерон"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieCollection.Core.Entities.Movie", b =>
                {
                    b.HasOne("MovieCollection.Core.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieCollection.Core.Entities.Producer", b =>
                {
                    b.HasOne("MovieCollection.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
